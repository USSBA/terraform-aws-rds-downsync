version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1
  terraform: circleci/terraform@2

executors:
  circle-machine:
    # Required for multi-container docker-compose setups
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
  base:
    docker:
    - image: cimg/base:2020.12

commands:
  build-containers:
    steps:
    - ecr-image-build:
        directory: docker
        image_name: terraform-aws-rds-downsync
  push-containers:
    steps:
    - ecr-image-push:
        image_name: terraform-aws-rds-downsync
  aws-init:
    parameters:
      region:
        type: string
        description: A default AWS region name
        default: us-east-1
    steps:
    - aws-cli/setup
    - run:
        name: aws-init
        command: |
          echo 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-<< parameters.region >>}' >> $BASH_ENV
          echo 'AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)' >> $BASH_ENV
          echo 'AWS_ECR_ENDPOINT="public.ecr.aws/ussba"' >> $BASH_ENV
          source $BASH_ENV
  ecr-login:
    steps:
    - run:
        name: ecr docker login
        command: |
          aws_version=`aws --version 2>&1`
          if echo $aws_version | grep 'aws-cli/1' > /dev/null; then
            echo "aws-cli v1 detected. Logging in to ecr docker..."
            `aws ecr-public get-login --no-include-email --region ${AWS_DEFAULT_REGION}`
          elif echo $aws_version | grep 'aws-cli/2' > /dev/null; then
            echo "aws-cli v2 detected. Logging in to ecr docker..."
            aws ecr-public get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "${AWS_ECR_ENDPOINT}"
          else
            echo "Can't detect the version of awscli being used..."
            exit 1
          fi
  ecr-image-build:
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      image_name:
        type: string
      directory:
        type: string
    steps:
    - run:
        name: Build << parameters.dockerfile >> docker image
        command: |
          cd "<< parameters.directory >>"
          docker image build . -f "<< parameters.dockerfile >>" --tag "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
  ecr-image-push:
    parameters:
      image_name:
        type: string
    steps:
    - deploy:
        name: docker image push
        command: |
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          docker image tag \
            "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}" \
            "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
  #terraform-install:
  #  steps:
  #    - terraform/install:
  #        terraform_version: 1.0.9
  #terraform-format:
  #  parameters:
  #    folder:
  #      type: string
  #      description: A relative path from the project root in which to perform terrafrom fmt
  #  steps:
  #    - deploy:
  #        name: Terraform Format Check
  #        command: |
  #          throw_error() {
  #            echo $1
  #            return 1
  #          }
  #          cd << parameters.folder >> || throw_error "FATAL: command 'cd << parameters.folder >>' has failed"
  #          terraform fmt -check -recursive

jobs:
  #test-terraform-format:
  #  executor: base
  #  steps:
  #    - checkout
  #    - terraform-install
  #    - terraform-format:
  #        folder: terraform
  build-containers:
    executor: circle-machine
    steps:
      - checkout
      - run:
          name: aws-env
          command: |
            echo 'AWS_ECR_ENDPOINT="ecr-temp"' >> $BASH_ENV
      - build-containers
      - ecr-image-build:
          directory: docker
          image_name: terraform-aws-rds-downsync
  build-and-push-containers:
    executor: base
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - aws-init
    - ecr-login
    - ecr-image-build:
        directory: docker
        image_name: terraform-aws-rds-downsync
    - ecr-image-push:
        image_name: terraform-aws-rds-downsync

workflows:
  version: 2
  tests:
    jobs:
    #- test-terraform-format
    - build-containers
  deploy:
    jobs:
    - build-and-push-containers:
        name: build-and-push-containers
        context: sba-mgmt-terraform
        filters:
          branches:
            ignore: /.*/
          tags:
            only:
            - /v[0-9]+(\.[0-9]+)*$/
